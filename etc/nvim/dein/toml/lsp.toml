[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua << EOF
require('mason').setup()
require('mason-lspconfig').setup()

local lspconfig = require('lspconfig')
local util = require('lspconfig/util')

lspconfig.metals.setup({})
lspconfig.pyright.setup({})
lspconfig.vimls.setup({})
lspconfig.gopls.setup({
  cmd = {"gopls", "serve"},
  filetypes = {"go", "gomod"},
  root_dir = util.root_pattern("go.work", "go.mod", ".git"),
  settings = {
    gopls = {
      analyses = {
        unusedparams = true,
      },
      staticcheck = true,
    },
  },
})
lspconfig.terraformls.setup({
  cmd = {'terraform-ls', 'serve'}
})
lspconfig.clangd.setup({})
lspconfig.sqlls.setup({})
lspconfig.yamlls.setup({})
lspconfig.opencl_ls.setup({})
lspconfig.texlab.setup({})
lspconfig.terraformls.setup({})
lspconfig.volar.setup({
  filetypes = {'typescript', 'javascript', 'javascriptreact', 'typescriptreact', 'vue', 'json'}
})
EOF

nnoremap gD <Cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap gh <Cmd>lua vim.lsp.buf.hover()<CR>

" Telescope で見る
" nnoremap gd <Cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap gi <Cmd>lua vim.lsp.buf.implementation()<CR>
" nnoremap gr <Cmd>lua vim.lsp.buf.references()<CR>

nnoremap gR <Cmd>lua vim.lsp.buf.rename()<CR>

" for scala
function! Generate_bsp_config() abort
  execute "lua vim.lsp.buf_request(0, \"workspace/executeCommand\", { command = 'metals.generate-bsp-config' })"
endfunction
command! -nargs=? GenerateBspConfig call Generate_bsp_config()
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
local null_ls = require("null-ls")
local formatting = null_ls.builtins.formatting
local diagnostics = null_ls.builtins.diagnostics

local sources = {
  formatting.scalafmt,
  formatting.isort,
  formatting.black.with{
    extra_args = {"--line-length=150"},
  },
  diagnostics.flake8.with{
    extra_args = {"--max-line-length=150" },
  },
  formatting.yamlfmt,
  diagnostics.yamllint.with{
    extra_args = {"--no-warnings"}
  },
  --diagnostics.mypy,
}

local lsp_formatting = function(bufnr)
    vim.lsp.buf.format({
        filter = function(client)
            -- apply whatever logic you want (in this example, we'll only use null-ls)
            return client.name == "null-ls"
        end,
        bufnr = bufnr,
    })
end

-- if you want to set up formatting on save, you can use this as a callback
local augroup = vim.api.nvim_create_augroup("LspFormatting", {})

-- add to your shared on_attach callback
local on_attach = function(client, bufnr)
    if client.supports_method("textDocument/formatting") then
        vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
        vim.api.nvim_create_autocmd("BufWritePre", {
            group = augroup,
            buffer = bufnr,
            callback = function()
                lsp_formatting(bufnr)
            end,
        })
    end
end

null_ls.setup({
  sources = sources,
  on_attach = on_attach,
})

EOF

" Iterm2 を使う場合はprofiles -> keys -> Ecs+
nnoremap <A-F> <Cmd>:lua vim.lsp.buf.format({ async = true })<CR>

augroup sql_fromatting
  autocmd!
  autocmd FileType sql nnoremap <buffer><A-F> <Cmd>:w<CR>::!npx prettier --write %<CR><CR>
augroup END
'''

[[plugins]]
repo = 'WhoIsSethDaniel/mason-tool-installer.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
require('mason-tool-installer').setup {

  -- a list of all tools you want to ensure are installed upon
  -- start; they should be the names Mason uses for each tool
  ensure_installed = {
    'yamlfmt',
    'texlab',
    'robotframework-lsp',
    'yaml-language-server',
    'vim-language-server',
    'taplo',
    'pyright',
    'lua-language-server',
    'clangd',
    'black',
    'dockerfile-language-server',
    'flake8',
    'gopls',
    'isort',
    'ltex-ls',
    'opencl-language-server',
    'prettier',
    'yamllint',
    'terraform-ls',
    'vue-language-server',
  },

  -- if set to true this will check each tool for updates. If updates
  -- are available the tool will be updated. This setting does not
  -- affect :MasonToolsUpdate or :MasonToolsInstall.
  -- Default: false
  auto_update = false,

  -- automatically install / update on startup. If set to false nothing
  -- will happen on startup. You can use :MasonToolsInstall or
  -- :MasonToolsUpdate to install tools and check for updates.
  -- Default: true
  run_on_start = true,

  -- set a delay (in ms) before the installation starts. This is only
  -- effective if run_on_start is set to true.
  -- e.g.: 5000 = 5 second delay, 10000 = 10 second delay, etc...
  -- Default: 0
  start_delay = 3000, -- 3 second delay
}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
require('nvim-treesitter.configs').setup({
  -- A list of parser names, or "all"
  ensure_installed = "all",

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- Automatically install missing parsers when entering buffer
  auto_install = true,

  -- List of parsers to ignore installing (for "all")
  -- ignore_install = { "javascript" },

  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
  -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be disabled
    -- disable = { "c", "rust" },

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = true,
  },
  yati = { enable = true },
  rainbow = {
    enable = true,
    -- disable = { "jsx", "cpp" }, list of languages you want to disable the plugin for
    extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
    max_file_lines = nil, -- Do not enable for files with more than n lines, int
    -- colors = {}, -- table of hex strings
    -- termcolors = {} -- table of colour name strings
  }
})
EOF
'''

[[plugins]]
repo = 'yioneko/nvim-yati'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
on_source = 'nvim-treesitter'


[[plugins]]
repo = 'folke/trouble.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
  require("trouble").setup {
    position = "bottom", -- position of the list can be: bottom, top, left, right
    height = 10, -- height of the trouble list when position is top or bottom
    width = 50, -- width of the list when position is left or right
    icons = true, -- use devicons for filenames
    mode = "workspace_diagnostics", -- "workspace_diagnostics", "document_diagnostics", "quickfix", "lsp_references", "loclist"
    fold_open = "", -- icon used for open folds
    fold_closed = "", -- icon used for closed folds
    group = true, -- group results by file
    padding = true, -- add an extra new line on top of the list
    action_keys = { -- key mappings for actions in the trouble list
        -- map to {} to remove a mapping, for example:
        -- close = {},
        close = "q", -- close the list
        cancel = "<esc>", -- cancel the preview and get back to your last window / buffer / cursor
        refresh = "r", -- manually refresh
        jump = {"<cr>", "<tab>"}, -- jump to the diagnostic or open / close folds
        open_split = { "<c-x>" }, -- open buffer in new split
        open_vsplit = { "<c-v>" }, -- open buffer in new vsplit
        open_tab = { "<c-t>" }, -- open buffer in new tab
        jump_close = {"o"}, -- jump to the diagnostic and close the list
        toggle_mode = "m", -- toggle between "workspace" and "document" diagnostics mode
        toggle_preview = "P", -- toggle auto_preview
        hover = "K", -- opens a small popup with the full multiline message
        preview = "p", -- preview the diagnostic location
        close_folds = {"zM", "zm"}, -- close all folds
        open_folds = {"zR", "zr"}, -- open all folds
        toggle_fold = {"zA", "za"}, -- toggle fold of current file
        previous = "k", -- previous item
        next = "j" -- next item
    },
    indent_lines = true, -- add an indent guide below the fold icons
    auto_open = false, -- automatically open the list when you have diagnostics
    auto_close = false, -- automatically close the list when you have no diagnostics
    auto_preview = true, -- automatically preview the location of the diagnostic. <esc> to close preview and go back to last window
    auto_fold = false, -- automatically fold a file trouble list at creation
    auto_jump = {"lsp_definitions"}, -- for the given modes, automatically jump if there is only a single result
    signs = {
        -- icons / text used for a diagnostic
        error = "",
        warning = "",
        hint = "",
        information = "",
        other = "﫠"
    },
    use_diagnostic_signs = true -- enabling this will use the signs defined in your lsp client
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  }
EOF


nnoremap gxx <cmd>TroubleToggle<cr>
nnoremap gxw <cmd>TroubleToggle workspace_diagnostics<cr>
nnoremap gxq <cmd>TroubleToggle quickfix<cr>
nnoremap gxl <cmd>TroubleToggle loclist<cr>

" Telescope で
" nnoremap gxd <cmd>TroubleToggle document_diagnostics<cr>
'''
