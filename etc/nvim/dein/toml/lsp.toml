[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua << EOF
require('mason').setup()
require('mason-lspconfig').setup()

local lspconfig = require('lspconfig')
local util = require('lspconfig/util')

lspconfig.pyright.setup({})
lspconfig.vimls.setup({})
lspconfig.gopls.setup({
  cmd = {"gopls", "serve"},
  filetypes = {"go", "gomod"},
  root_dir = util.root_pattern("go.work", "go.mod", ".git"),
  settings = {
    gopls = {
      analyses = {
        unusedparams = true,
      },
      staticcheck = true,
    },
  },
})
lspconfig.terraformls.setup({
  cmd = {'terraform-ls', 'serve'}
})
lspconfig.clangd.setup({})
lspconfig.sqlls.setup({})
lspconfig.yamlls.setup({})
lspconfig.opencl_ls.setup({})
lspconfig.texlab.setup({})
EOF

nnoremap gD <Cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap gd <Cmd>lua vim.lsp.buf.definition()<CR>
nnoremap gh <Cmd>lua vim.lsp.buf.hover()<CR>
nnoremap gi <Cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap gr <Cmd>lua vim.lsp.buf.references()<CR>
nnoremap gR <Cmd>lua vim.lsp.buf.rename()<CR>
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'hashivim/vim-terraform'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
local null_ls = require("null-ls")
local formatting = null_ls.builtins.formatting
local diagnostics = null_ls.builtins.diagnostics

local sources = {
  formatting.terraform_fmt,
  formatting.scalafmt,
  formatting.isort,
  formatting.black.with{
    extra_args = {"--line-length=150"},
  },
  diagnostics.flake8.with{
    extra_args = {"--max-line-length=150" },
  },
  formatting.yamlfmt,
  diagnostics.yamllint.with{
    extra_args = {"--no-warnings"}
  },
  --diagnostics.mypy,
}

local augroup = vim.api.nvim_create_augroup("LspFormatting", {})
null_ls.setup({
  sources = sources,
  -- refer to https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Formatting-on-save
  -- you can reuse a shared lspconfig on_attach callback here
  on_attach = function(client, bufnr)
      if client.supports_method("textDocument/formatting") then
          vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
          vim.api.nvim_create_autocmd("BufWritePre", {
              group = augroup,
              buffer = bufnr,
              callback = function()
                  -- on 0.8, you should use vim.lsp.buf.format({ bufnr = bufnr }) instead
                  vim.lsp.buf.formatting_sync()
              end,
          })
      end
  end,
})
EOF

" Iterm2 を使う場合はprofiles -> keys -> Ecs+
nnoremap <A-F> <Cmd>:lua vim.lsp.buf.formatting()<CR>
augroup sql_fromatting
  autocmd!
  autocmd FileType sql nnoremap <buffer><A-F> <Cmd>:w<CR>::!npx prettier --write %<CR><CR>
augroup END
'''

[[plugins]]
repo = 'WhoIsSethDaniel/mason-tool-installer.nvim'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
require('mason-tool-installer').setup {

  -- a list of all tools you want to ensure are installed upon
  -- start; they should be the names Mason uses for each tool
  ensure_installed = {
    'yamlfmt',
    'texlab',
    'robotframework-lsp',
    'yaml-language-server',
    'vim-language-server',
    'taplo',
    'pyright',
    'lua-language-server',
    'clangd',
    'black',
    'dockerfile-language-server',
    'flake8',
    'gopls',
    'isort',
    'ltex-ls',
    'opencl-language-server',
    'prettier',
    'yamllint',
  },

  -- if set to true this will check each tool for updates. If updates
  -- are available the tool will be updated. This setting does not
  -- affect :MasonToolsUpdate or :MasonToolsInstall.
  -- Default: false
  auto_update = false,

  -- automatically install / update on startup. If set to false nothing
  -- will happen on startup. You can use :MasonToolsInstall or
  -- :MasonToolsUpdate to install tools and check for updates.
  -- Default: true
  run_on_start = true,

  -- set a delay (in ms) before the installation starts. This is only
  -- effective if run_on_start is set to true.
  -- e.g.: 5000 = 5 second delay, 10000 = 10 second delay, etc...
  -- Default: 0
  start_delay = 3000, -- 3 second delay
}
EOF
'''

[[plugins]]
repo = 'scalameta/nvim-metals' #https://creators-note.chatwork.com/entry/2022/03/28/083000
depends = 'plenary.nvim'
on_source = 'null-ls.nvim'
hook_source = '''
"https://github.com/scalameta/nvim-metals/discussions/39
lua << EOF
-------------------------------------------------------------------------------
-- These are example settings to use with nvim-metals and the nvim built-in
-- LSP. Be sure to thoroughly read the `:help nvim-metals` docs to get an
-- idea of what everything does. Again, these are meant to serve as an example,
-- if you just copy pasta them, then should work,  but hopefully after time
-- goes on you'll cater them to your own liking especially since some of the stuff
-- in here is just an example, not what you probably want your setup to be.
--
-- Unfamiliar with Lua and Neovim?
--  - Check out https://github.com/nanotee/nvim-lua-guide
--
-- The below configuration also makes use of the following plugins besides
-- nvim-metals, and therefore is a bit opinionated:
--
-- - https://github.com/hrsh7th/nvim-cmp
--   - hrsh7th/cmp-nvim-lsp for lsp completion sources
--   - hrsh7th/cmp-vsnip for snippet sources
--   - hrsh7th/vim-vsnip for snippet sources
--
-- - https://github.com/wbthomason/packer.nvim for package management
-- - https://github.com/mfussenegger/nvim-dap (for debugging)
-------------------------------------------------------------------------------
local api = vim.api
local cmd = vim.cmd

local function map(mode, lhs, rhs, opts)
  local options = { noremap = true }
  if opts then
    options = vim.tbl_extend("force", options, opts)
  end
  api.nvim_set_keymap(mode, lhs, rhs, options)
end

----------------------------------
-- LSP Setup ---------------------
----------------------------------
local metals_config = require("metals").bare_config()

-- Example of settings
metals_config.settings = {
  showImplicitArguments = true,
  excludedPackages = { "akka.actor.typed.javadsl", "com.github.swagger.akka.javadsl" },
  showInferredType = true,
}

metals_config.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    virtual_text = {
      prefix = '',
    }
  }
)

-- https://github.com/neovim/neovim/issues/14952
-- null-ls でscalafmt Formatting したいのでmetalsのフォーマット切る
metals_config.on_attach = function(client, bufnr)
  client.resolved_capabilities.document_formatting = false
end

-- Autocmd that will actually be in charging of starting the whole thing
local nvim_metals_group = api.nvim_create_augroup("nvim-metals", { clear = true })
api.nvim_create_autocmd("FileType", {
  -- NOTE: You may or may not want java included here. You will need it if you
  -- want basic Java support but it may also conflict if you are using
  -- something like nvim-jdtls which also works on a java filetype autocmd.
  pattern = { "scala", "sbt", "java" },
  callback = function()
    require("metals").initialize_or_attach(metals_config)
  end,
  group = nvim_metals_group,
})
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
require('nvim-treesitter.configs').setup({
  -- A list of parser names, or "all"
  ensure_installed = "all",

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- Automatically install missing parsers when entering buffer
  auto_install = true,

  -- List of parsers to ignore installing (for "all")
  -- ignore_install = { "javascript" },

  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
  -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be disabled
    -- disable = { "c", "rust" },

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = true,
  },
})
EOF
'''
